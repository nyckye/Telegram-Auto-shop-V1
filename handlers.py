from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_IDS
from database import db

router = Router()

class AdminStates(StatesGroup):
    waiting_product_name = State()
    waiting_product_description = State()
    waiting_product_price = State()
    waiting_product_keys = State()
    waiting_delete_id = State()

def main_keyboard(user_id):
    keyboard = [
        [InlineKeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_purchases")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")]
    ]
    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def admin_keyboard():
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_list_products")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_delete_product")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def catalog_keyboard(products):
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(
            text=f"{product[1]} - {product[3]}‚ÇΩ (–í –Ω–∞–ª–∏—á–∏–∏: {product[4]})",
            callback_data=f"product_{product[0]}"
        )])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def product_keyboard(product_id):
    keyboard = [
        [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("start"))
async def cmd_start(message: Message):
    db.add_user(message.from_user.id, message.from_user.username)
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        "üõç –≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_keyboard(message.from_user.id)
    )

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_keyboard(callback.from_user.id)
    )
    await callback.answer()

@router.callback_query(F.data == "catalog")
async def show_catalog(callback: CallbackQuery):
    products = db.get_all_products()
    if not products:
        await callback.message.edit_text(
            "üòî –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
    else:
        await callback.message.edit_text(
            "üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=catalog_keyboard(products)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = (
        f"üì¶ {product[1]}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{product[2]}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ\n"
        f"üìä –í –Ω–∞–ª–∏—á–∏–∏: {product[4]} —à—Ç."
    )
    
    await callback.message.edit_text(text, reply_markup=product_keyboard(product_id))
    await callback.answer()

@router.callback_query(F.data.startswith("buy_"))
async def buy_product(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if product[4] == 0:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
        return
    
    key = db.get_available_key(product_id)
    
    if key:
        db.mark_key_sold(key[0])
        db.add_purchase(callback.from_user.id, product_id, product[3])
        
        await callback.message.answer(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product[1]}\n"
            f"üí∞ –¶–µ–Ω–∞: {product[3]}‚ÇΩ\n\n"
            f"üîë –í–∞—à –∫–ª—é—á:\n<code>{key[2]}</code>\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
            parse_mode="HTML"
        )
        
        await callback.message.edit_text(
            "‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–ö–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
            ])
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data == "my_purchases")
async def show_purchases(callback: CallbackQuery):
    purchases = db.get_user_purchases(callback.from_user.id)
    
    if not purchases:
        text = "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫"
    else:
        text = "üì¶ –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n\n"
        for purchase in purchases:
            text += f"‚Ä¢ {purchase[0]} - {purchase[1]}‚ÇΩ\n  {purchase[2]}\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "info")
async def show_info(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ:\n\n"
        "üõç –ú—ã –ø—Ä–æ–¥–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
        "‚ö°Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
        "üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
        "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @support",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "admin")
async def admin_panel(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    total_users, total_purchases, total_revenue = db.get_stats()
    
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üõç –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}\n"
        f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue}‚ÇΩ"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "admin_add_product")
async def admin_add_product_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_product_name)
    await callback.answer()

@router.message(AdminStates.waiting_product_name)
async def admin_add_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_product_description)

@router.message(AdminStates.waiting_product_description)
async def admin_add_product_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AdminStates.waiting_product_price)

@router.message(AdminStates.waiting_product_price)
async def admin_add_product_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        
        data = await state.get_data()
        product_id = db.add_product(data['name'], data['description'], price)
        
        await state.update_data(product_id=product_id)
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞.\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ"
        )
        await state.set_state(AdminStates.waiting_product_keys)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.message(AdminStates.waiting_product_keys)
async def admin_add_product_keys(message: Message, state: FSMContext):
    if message.text == "/skip":
        await message.answer(
            "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∫–ª—é—á–µ–π",
            reply_markup=main_keyboard(message.from_user.id)
        )
        await state.clear()
        return
    
    data = await state.get_data()
    product_id = data['product_id']
    
    keys = message.text.strip().split('\n')
    for key in keys:
        if key.strip():
            db.add_product_key(product_id, key.strip())
    
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞",
        reply_markup=main_keyboard(message.from_user.id)
    )
    await state.clear()

@router.callback_query(F.data == "admin_list_products")
async def admin_list_products(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    products = db.get_all_products()
    
    if not products:
        text = "üìù –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        for product in products:
            text += f"ID: {product[0]}\n{product[1]} - {product[3]}‚ÇΩ\n–í –Ω–∞–ª–∏—á–∏–∏: {product[4]}\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "admin_delete_product")
async def admin_delete_product_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    products = db.get_all_products()
    
    if not products:
        await callback.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    text = "‚ùå –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for product in products:
        text += f"ID: {product[0]} - {product[1]}\n"
    
    await callback.message.edit_text(text)
    await state.set_state(AdminStates.waiting_delete_id)
    await callback.answer()

@router.message(AdminStates.waiting_delete_id)
async def admin_delete_product_confirm(message: Message, state: FSMContext):
    try:
        product_id = int(message.text)
        product = db.get_product(product_id)
        
        if product:
            db.delete_product(product_id)
            await message.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä '{product[1]}' —É–¥–∞–ª–µ–Ω",
                reply_markup=main_keyboard(message.from_user.id)
            )
        else:
            await message.answer(
                "‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=main_keyboard(message.from_user.id)
            )
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
